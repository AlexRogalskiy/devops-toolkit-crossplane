apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: gitops-argo-cd
  labels:
    provider: argo
spec:
  compositeTypeRef:
    apiVersion: devopstoolkitseries.com/v1alpha1
    kind: GitOps
  patchSets:
  - name: metadata
    patches:
    - fromFieldPath: metadata.labels
  resources:
  - name: helm
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            key: kubeconfig
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.credentials.secretRef.namespace
      # TODO: Refactor
    - fromFieldPath: spec.id
      toFieldPath: spec.credentials.secretRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-ekscluster"
    readinessChecks:
      - type: None
  - name: argocd
    base:
      apiVersion: helm.crossplane.io/v1beta1
      kind: Release
      spec:
        rollbackLimit: 3
        forProvider:
          namespace: argocd
          chart:
            name: argo-cd
            repository: https://argoproj.github.io/argo-helm
            version: "3.26.3"
          set:
          - name: server.extraArgs
            value: "{--insecure}"
          - name: controller.args.appResyncPeriod
            value: "30"
          - name: configs.secret.argocdServerAdminPassword
            value: "$2a$10$m3eTlEdRen0nS86c5Zph5u/bDFQMcWZYdG3NVdiyaACCqoxLJaz16"
          - name: configs.secret.argocdServerAdminPasswordMtime
            value: "2021-11-08T15:04:05Z"
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-argocd"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: kubernetes
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: ProviderConfig
      spec:
        credentials:
          source: Secret
          secretRef:
            key: kubeconfig
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
    - fromFieldPath: spec.writeConnectionSecretToRef.namespace
      toFieldPath: spec.credentials.secretRef.namespace
      # TODO: Refactor
    - fromFieldPath: spec.id
      toFieldPath: spec.credentials.secretRef.name
      transforms:
        - type: string
          string:
            fmt: "%s-ekscluster"
    readinessChecks:
      - type: None
  - name: argocd-project
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: argoproj.io/v1alpha1
            kind: AppProject
            metadata:
              name: production
              namespace: argocd
              finalizers:
                - resources-finalizer.argocd.argoproj.io
            spec:
              description: Production project
              sourceRepos:
              - '*'
              destinations:
              - namespace: '*'
                server: '*'
              clusterResourceWhitelist:
              - group: '*'
                kind: '*'
              namespaceResourceWhitelist:
              - group: '*'
                kind: '*'
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-argocd-project"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: argocd-app
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: argoproj.io/v1alpha1
            kind: Application
            metadata:
              name: production-apps
              namespace: argocd
              finalizers:
                - resources-finalizer.argocd.argoproj.io
            spec:
              project: production
              source:
                targetRevision: HEAD
                path: apps
              destination:
                server: https://kubernetes.default.svc
                namespace: production
              syncPolicy:
                automated:
                  selfHeal: true
                  prune: true
                  allowEmpty: true
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-argocd-app"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
    - fromFieldPath: spec.parameters.gitOpsRepo
      toFieldPath: spec.forProvider.manifest.spec.source.repoURL
  - name: k8s-provider-sa
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: provider-kubernetes
              namespace: crossplane-system
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-k8s-provider-sa"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: k8s-provider-crd
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: provider-kubernetes
            subjects:
            - kind: ServiceAccount
              name: provider-kubernetes
              namespace: crossplane-system
            roleRef:
              kind: ClusterRole
              name: cluster-admin
              apiGroup: rbac.authorization.k8s.io
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-k8s-provider-crb"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: k8s-provider-cc
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1alpha1
            kind: ControllerConfig
            metadata:
              name: provider-kubernetes
            spec:
              serviceAccountName: provider-kubernetes
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-k8s-provider-cc"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: k8s-provider
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Provider
            metadata:
              name: provider-kubernetes
            spec:
              package: crossplane/provider-kubernetes:main
              controllerConfigRef:
                name: provider-kubernetes
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-k8s-provider"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
  - name: config-app
    base:
      apiVersion: kubernetes.crossplane.io/v1alpha1
      kind: Object
      spec:
        forProvider:
          manifest:
            apiVersion: pkg.crossplane.io/v1
            kind: Configuration
            metadata:
              name: crossplane-app
            spec:
              package: vfarcic/crossplane-app:v0.1.1
    patches:
    - fromFieldPath: spec.id
      toFieldPath: metadata.name
      transforms:
        - type: string
          string:
            fmt: "%s-config-app"
    - fromFieldPath: spec.id
      toFieldPath: spec.providerConfigRef.name
